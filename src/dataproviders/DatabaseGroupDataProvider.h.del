#ifndef OPENMITTSU_DATAPROVIDERS_DATABASEGROUPDATAPROVIDER_H_
#define OPENMITTSU_DATAPROVIDERS_DATABASEGROUPDATAPROVIDER_H_

#include "database/DatabaseGroupMessageCursor.h"
#include "dataproviders/GroupDataProvider.h"
#include "dataproviders/DatabaseContactDataProvider.h"

#include <QString>
#include <QVariant>

class openmittsu::database::Database;

namespace openmittsu {
	namespace dataproviders {

		class DatabaseGroupDataProvider : public virtual GroupDataProvider, public virtual DatabaseContactDataProvider {
		public:
			DatabaseGroupDataProvider(openmittsu::database::Database& database);
			virtual ~DatabaseGroupDataProvider();

			virtual bool hasGroup(GroupId const& group) const override;
			virtual int getGroupCount() const override;

			virtual QString getNickname(GroupId const& group) const override;
			virtual QString getGroupTitle(GroupId const& group) const override;
			virtual QString getGroupDescription(GroupId const& group) const override;
			virtual bool getGroupHasImage(GroupId const& group) const override;
			virtual QByteArray getGroupImage(GroupId const& group) const override;
			virtual QSet<ContactId> getGroupMembers(GroupId const& group) const override;
			virtual bool getGroupIsAwaitingSync(GroupId const& group) const override;

			virtual void addGroup(GroupId const& group, QSet<ContactId> const& members) override;
			virtual void setGroupTitle(GroupId const& group, QString const& newTitle) override;
			virtual void setGroupImage(GroupId const& group, QByteArray const& newImage) override;
			virtual void setGroupMembers(GroupId const& group, QSet<ContactId> const& newMembers) override;

			virtual BackedGroup getGroup(GroupId const& group) override;
			virtual BackedGroupMessage getGroupMessage(GroupId const& group, QString const& uuid) override;

			virtual QSet<GroupId> getGroups() const override;
			virtual QHash<GroupId, std::pair<QSet<ContactId>, QString>> getKnownGroupsWithMembersAndTitles() const override;
			virtual QSet<GroupId> getKnownGroupsContainingMember(ContactId const& identity) const override;

			virtual std::shared_ptr <messages::GroupMessageCursor> getMessageCursor(GroupId const& group) override;
		private slots:
			void onGroupChanged(GroupId const& group);
		private:
			openmittsu::database::Database& m_database;

			QVariant queryField(GroupId const& group, QString const& fieldName) const;
			void setField(GroupId const& group, QString const& fieldName, QVariant const& value);
		};

	}
}

#endif // OPENMITTSU_DATAPROVIDERS_DATABASEGROUPDATAPROVIDER_H_
