#include "dataproviders/DatabaseGroupDataProvider.h"

#include "database/Database.h"
#include "dataproviders/BackedGroup.h"
#include "dataproviders/BackedGroupMessage.h"
#include "utility/QObjectConnectionMacro.h"

namespace openmittsu {
	namespace dataproviders {

		DatabaseGroupDataProvider::DatabaseGroupDataProvider(openmittsu::database::Database& database) : GroupDataProvider(), DatabaseContactDataProvider(database), m_database(database) {
			OPENMITTSU_CONNECT(&m_database, groupChanged(GroupId const&), this, onGroupChanged(GroupId const&));
		}

		DatabaseGroupDataProvider::~DatabaseGroupDataProvider() {
			OPENMITTSU_DISCONNECT_NOTHROW(&m_database, groupChanged(GroupId const&), this, onGroupChanged(GroupId const&));
		}

		bool DatabaseGroupDataProvider::hasGroup(GroupId const& group) const {
			return m_database.hasGroup(group);
		}

		int DatabaseGroupDataProvider::getGroupCount() const {
			return m_database.getGroupCount();
		}

		QString DatabaseGroupDataProvider::getNickname(GroupId const& group) const {
			QString result;

			// TODO

			return result;
		}

		QString DatabaseGroupDataProvider::getGroupTitle(GroupId const& group) const {
			return queryField(group, QStringLiteral("groupname")).toString();
		}

		QString DatabaseGroupDataProvider::getGroupDescription(GroupId const& group) const {
			QString result;

			// TODO

			return result;
		}

		bool DatabaseGroupDataProvider::getGroupHasImage(GroupId const& group) const {
			QVariant const result = queryField(group, QStringLiteral("avatar_uuid"));
			if (result.isNull() || result.toString().isEmpty()) {
				return false;
			}

			return true;
		}

		QByteArray DatabaseGroupDataProvider::getGroupImage(GroupId const& group) const {
			QString const uuid = queryField(group, QStringLiteral("avatar_uuid")).toString();

			return m_database.getMediaItem(uuid);
		}

		QSet<ContactId> DatabaseGroupDataProvider::getGroupMembers(GroupId const& group) const {
			return m_database.getGroupMembers(group);
		}

		bool DatabaseGroupDataProvider::getGroupIsAwaitingSync(GroupId const& group) const {
			return m_database.getGroupIsAwaitingSync(group);
		}

		void DatabaseGroupDataProvider::addGroup(GroupId const& group, QSet<ContactId> const& members) {
			m_database.onFoundNewGroup(group, members);

			m_database.announceGroupChanged(group);
		}

		void DatabaseGroupDataProvider::setGroupTitle(GroupId const& group, QString const& newTitle) {
			if (!hasGroup(group)) {
				throw InternalErrorException() << "Could not set title \"" << newTitle.toStdString() << "\", the given group " << group.toString() << " is unknown!";
			}

			setField(group, QStringLiteral("groupname"), newTitle);

			m_database.announceGroupChanged(group);
		}

		void DatabaseGroupDataProvider::setGroupImage(GroupId const& group, QByteArray const& newImage) {
			if (!hasGroup(group)) {
				throw InternalErrorException() << "Could not set group image, the given group " << group.toString() << " is unknown!";
			}

			QVariant const oldUuid = queryField(group, QStringLiteral("avatar_uuid"));
			if (!oldUuid.isNull() && !oldUuid.toString().isEmpty()) {
				m_database.removeMediaItem(oldUuid.toString());
			}

			QString const uuid = m_database.insertMediaItem(newImage);
			setField(group, QStringLiteral("avatar_uuid"), uuid);

			m_database.announceGroupChanged(group);
		}

		void DatabaseGroupDataProvider::setGroupMembers(GroupId const& group, QSet<ContactId> const& newMembers) {
			QString memberString(QStringLiteral(""));
			ContactId const ourId = m_database.getSelfContact();
			bool containsUs = (group.getOwner() == ourId);
			for (ContactId const& contactId : newMembers) {
				if (contactId == ourId) {
					containsUs = true;
				}

				if (memberString.isEmpty()) {
					memberString = contactId.toQString();
				} else {
					memberString.append(QStringLiteral(";")).append(contactId.toQString());
				}
			}

			int const isDeleted = (containsUs) ? 0 : 1;

			setField(group, QStringLiteral("members"), memberString);
			setField(group, QStringLiteral("is_deleted"), isDeleted);

			m_database.announceGroupChanged(group);
		}

		BackedGroup DatabaseGroupDataProvider::getGroup(GroupId const& group) {
			return BackedGroup(group, *this, *this, m_database);
		}

		QSet<GroupId> DatabaseGroupDataProvider::getGroups() const {
			return m_database.getKnownGroups();
		}

		QHash<GroupId, std::pair<QSet<ContactId>, QString>> DatabaseGroupDataProvider::getKnownGroupsWithMembersAndTitles() const {
			return m_database.getKnownGroupsWithMembersAndTitles();
		}

		QSet<GroupId> DatabaseGroupDataProvider::getKnownGroupsContainingMember(ContactId const& identity) const {
			return m_database.getKnownGroupsContainingMember(identity);
		}

		void DatabaseGroupDataProvider::onGroupChanged(GroupId const& group) {
			emit groupChanged(group);
		}

		QVariant DatabaseGroupDataProvider::queryField(GroupId const& group, QString const& fieldName) const {
			QSqlQuery query(m_database.database);

			query.prepare(QStringLiteral("SELECT `%1` FROM `groups` WHERE `id` = :groupId AND `creator` = :groupCreator;").arg(fieldName));
			query.bindValue(QStringLiteral(":groupId"), QVariant(group.groupIdWithoutOwnerToQString()));
			query.bindValue(QStringLiteral(":groupCreator"), QVariant(group.getOwner().toQString()));

			if (!query.exec() || !query.isSelect()) {
				throw InternalErrorException() << "Could not execute message field query for table groups with group \"" << group.toString() << "\" for field \"" << fieldName.toStdString() << "\". Query error: " << query.lastError().text().toStdString();
			} else if (!query.next()) {
				throw InternalErrorException() << "No group with group ID \"" << group.toString() << "\" exists, can not manipulate.";
			}

			return query.value(fieldName);
		}

		void DatabaseGroupDataProvider::setField(GroupId const& group, QString const& fieldName, QVariant const& value) {
			QSqlQuery query(m_database.database);
			query.prepare(QStringLiteral("UPDATE `groups` SET `%1` = :value WHERE `id` = :groupId AND `creator` = :groupCreator;").arg(fieldName));
			query.bindValue(QStringLiteral(":groupId"), QVariant(group.groupIdWithoutOwnerToQString()));
			query.bindValue(QStringLiteral(":groupCreator"), QVariant(group.getOwner().toQString()));
			query.bindValue(QStringLiteral(":value"), value);

			if (!query.exec()) {
				throw InternalErrorException() << "Could not update group data for group ID \"" << group.toString() << "\". Query error: " << query.lastError().text().toStdString();
			}
		}

		std::shared_ptr<messages::GroupMessageCursor> DatabaseGroupDataProvider::getMessageCursor(GroupId const& group) {
			return std::make_shared<openmittsu::database::DatabaseGroupMessageCursor>(m_database, group);
		}

		BackedGroupMessage DatabaseGroupDataProvider::getGroupMessage(GroupId const& group, QString const& uuid) {
			openmittsu::database::DatabaseGroupMessageCursor cursor(m_database, group);
			if (!cursor.seekByUuid(uuid)) {
				throw InternalErrorException() << "Could not find message with UUID " << uuid.toStdString() << " for group " << group.toString() << ".";
			}
			auto message = cursor.getMessage();

			return BackedGroupMessage(message, getContact(message->getSender()), m_database);
		}

	}
}
